<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python初阶语法</title>
    <url>/2023/08/18/python%E5%88%9D%E9%98%B6%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="python基础语法"><a href="#python基础语法" class="headerlink" title="python基础语法"></a>python基础语法</h1><p>长文警告！！！本文适合初学py的小白阅读(根据需要进行跳转)。</p>
<h3 id="输出函数print"><a href="#输出函数print" class="headerlink" title="输出函数print()"></a>输出函数print()</h3><pre><code class="lang-python">#输出数字
print (98.5)

#输出字符串
print (&quot;Hello, clovershrub&quot;)
print(&#39;hello,world&#39;)

#输出表达式
print(3+1)

#将数据输出文件中，注意点，1.所指定的盘存在，2.使用file=fp
fp=open(&#39;D:/text.txt&#39;,&#39;a+&#39;)#文件不存在就创建，存在就在文件内容后面继续追加
print(&#39;helloworld&#39;,file=fp)
fp.close()

#不进行换行输出(输出内容在一行当中)
print(&#39;hello&#39;,&#39;world&#39;,&#39;Python&#39;)
</code></pre>
<h3 id="转义字符与原字符"><a href="#转义字符与原字符" class="headerlink" title="转义字符与原字符"></a>转义字符与原字符</h3><pre><code class="lang-python">#转义字符
print(&#39;hello\nworld&#39;)#n--newline的首字符表示换行
print(&#39;hello\tworld&#39;)
print(&#39;helloooo\tworld&#39;)
print(&#39;hello\rworld&#39;)
print(&#39;hello\bworld&#39;)

print(&#39;http:\\\\www.baidu.com&#39;)
print(&#39;老师说：\&quot;大家好。\&quot;&#39;)
</code></pre>
<h3 id="二进制与字符编码"><a href="#二进制与字符编码" class="headerlink" title="二进制与字符编码"></a>二进制与字符编码</h3><pre><code class="lang-python">print(chr(0b100111001011000))
print(ord(&#39;乘&#39;))

#变量由三部分组成
name=&#39;阿丽亚&#39;
print(name)
print(&#39;标识&#39;,id(name)) #表示对象所储存的内存地址
print(&#39;类型&#39;,type(name)) #表示的是对象的数据类型
print(&#39;值&#39;,name) #表示对象所储存的具体数据

name=&#39;王晨亮&#39;
name=&#39;梁桐&#39;
print(name)
#一个变量可以多次赋值，但多次复制后变量会指向一个新的空间

#整数类型 integer - int 二进制 - 0b 八进制 - 0o 十六进制 - 0x
n1=90
n2=-10
n3=0
print(n1,type(n1))
print(n2,type(n2))
print(n3,type(n3))

print(&#39;十进制&#39;,1010)
print(&#39;二进制&#39;,0b1010)
print(&#39;八进制&#39;,0o1010)
print(&#39;十六进制&#39;,0x1010)
</code></pre>
<h3 id="Python中常见的数据类型"><a href="#Python中常见的数据类型" class="headerlink" title="Python中常见的数据类型"></a>Python中常见的数据类型</h3><pre><code class="lang-python">#浮点类型 存储不精确性
a=3.1415926
print(a,type(a))
n1=1.1
n2=2.2
n3=2.1
print(n1+n2)
print(n1+n3)

from decimal import Decimal
print(Decimal(&#39;1.1&#39;)+Decimal(&#39;2.2&#39;))

#布尔类型
f1=True
f2=False
print(f1,type(f1))
print(f2,type(f2))
#转成整数计算
print(f1+1)
print(f2+1)

#字符串类型
str1=&#39;abc&#39;
str2=&#39;&#39;&#39;abc&#39;&#39;&#39;
print(str1,type(str1))
print(str2,type(str2))
</code></pre>
<h3 id="类型转换与注释"><a href="#类型转换与注释" class="headerlink" title="类型转换与注释"></a>类型转换与注释</h3><pre><code class="lang-python">name=&#39;刘&#39;
age=20

print(type(name),type(age))#说明name与age的数据类型不相同
#print(&#39;我叫&#39;+name+&#39;今年,&#39;+age+&#39;岁&#39;)#当将str类型与int类型进行连接时，报错，解决方案，类型转换
print(&#39;我叫&#39;+name+&#39;，今年&#39;+str(age)+&#39;岁&#39;)#将int类型通过str()

print(&#39;---str()将其他类型转成str类型---&#39;)
a=10
b=198.2
c=False
print(type(a),type(b),type(c))
print(str(a),str(b),str(c),type(str(a)),type(str(b)),type(str(c)))
print(&#39;---int()将其他类型转换成int类型---&#39;)
s1=&#39;128&#39;
f1=98.7
s2=&quot;45.6&quot;
ff=True
s3=&quot;hello&quot;
print(type(s1),type(f1),type(s2),type(ff),type(s3))
print(int(s1),type(int(s1))) #字符串为数字串
print(int(f1),type(int(f1))) #截取整数部分，小数舍掉
#print(int(s2),type(int(s2))) #字符串为小数串
print(int(ff),type(int(ff)))
#print(int(s3),type(int(s3))) #字符串必须为数字串且为整形

print(&#39;---float()将其他类型转换成float类型---&#39;)
s1=&#39;128.98&#39;
s2=&quot;76&quot;
ff=True
s3=&quot;hello&quot; 
i=98
print(type(s1),type(s2),type(ff),type(s3),type(i))
print(float(s1),type(float(s1)))
print(float(s2),type(float(s2)))
print(float(ff),type(float(ff)))
#print(float(s3),type(float(s3))) #非数字串不允许转换
print(float(i),type(float(i))) 

&#39;&#39;&#39;多行注释
多行哦&#39;&#39;&#39;
</code></pre>
<h3 id="input-函数的使用"><a href="#input-函数的使用" class="headerlink" title="input()函数的使用"></a>input()函数的使用</h3><pre><code class="lang-python">#输入函数input
prasent=input(&#39;大圣想要什么礼物呢？&#39;)
print(prasent,type(prasent))

a=int(input(&#39;请输入一个加数：&#39;))
b=int(input(&#39;请输入一个被加数：&#39;))
print(type(a),type(b))
print(a+b)
#print(int(a)+int(b))
</code></pre>
<h3 id="运算符和其优先级"><a href="#运算符和其优先级" class="headerlink" title="运算符和其优先级"></a>运算符和其优先级</h3><pre><code class="lang-python">print(1+1) #加
print(1-1) #减
print(2*4) #乘
print(11/2) #除
print(11//2) #整除运算
print(11%2) #取余
print(2**3) #幂运算

print(9//4)
print(-9//-4)
#一正一负向下取整
print(9//-4)
print(-9//4)
print(9%-4)#-3 公式 余数=被除数-除数*商 9-(-4)*(-3) 9-12---3
print(-9%4)#3                 -9-4*(-3) -9+12--3 

a=3+4
print(a)
b=c=d=20
print(d,id(d))
print(b,id(b))
print(c,id(c))

a=20
a+=30
print(a)
a*=2
print(a)
a/=30
print(a)
a%=3
print(a)

a,b,c=1,2,3
print(a,b,c)
a,b=10,20
print(&#39;交换前&#39;,a,b)
a,b=b,a
print(&#39;交换后&#39;,a,b)

a,b=10,20
print(&#39;ab吗?&#39;,ab)
print(a&amp;lt;b)
print(a&amp;lt;=b)
print(a=b)
print(a==b)
print(a!=b)

a=10
b=10
print(a==b) #True 说明，a与b的value相等
print(a is b) #True 说明，a与b的id标识相等
print(a is not b)

lst1=[11,22,33,44]
lst2=[11,22,33,44]
print(lst1==lst2)
print(lst1 is lst2 )
print(id(lst1))
print(id(lst2))
print(lst1 is not lst2)

a,b=1,2
print(a==1 and b==2)
print(a==1 and b&amp;lt;2)
print(a!=1 and b==2)
print(a!=1 and b!=2)

print(a==1 or b==2)
print(a==1 or b&amp;lt;2)
print(a!=1 or b==2)
print(a!=1 or b!=2)

#not 对bool类型操作数取反
f=True
f2=False
print(not f)
print(not f2)

s=&#39;helloworld&#39;
print(&#39;w&#39; in s)
print(&#39;k&#39; in s)
print(&#39;w&#39; not in s)
print(&#39;k&#39; not in s)

print(4&amp;amp;8) #按位与&amp;amp;，同时为1结果为1
print(4|8) #按位或|，同时为0结果为0
print(4&amp;lt;&amp;lt;1) #向左移动1位 相当于乘以2
print(4&amp;lt;&amp;lt;2) #向左移动2位
print(41) #向右移动1位，相当于除以二
print(42) #除以4

&#39;&#39;&#39;运算符优先级
0.()
1.算术运算 2.位运算 3.比较运算 
4.bool运算 5.赋值运算&#39;&#39;&#39;
</code></pre>
<h3 id="对象的bool值"><a href="#对象的bool值" class="headerlink" title="对象的bool值"></a>对象的bool值</h3><pre><code class="lang-python">#以下对象bool值均为False
print(bool(False))
print(bool(0))
print(bool(0.0))
print(bool(None))
print(bool(&#39;&#39;))
print(bool(&quot;&quot;))
print(bool([])) #空列表
print(bool(list())) #空列表
print(bool(())) #空元组
print(bool(tuple())) #空元组
print(bool(&#123;&#125;)) #空字典
print(bool(dict())) #空字典
print(bool(set())) #空集合
#其他对象bool值均为True
</code></pre>
<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><pre><code class="lang-python">#单分支结构
money=1000
s=int(input(&#39;请输入取款金额：&#39;))
if money=s:
    money=money-s
    print(&#39;取款成功，余额为：&#39;,money)

#双分支结构
num=int(input(&#39;请输入一个整数：&#39;))
if num/2==0:
    print(num,&#39;是偶数&#39;)
else:
    print(num,&#39;是奇数&#39;)

#多分支结构
score=float(input(&#39;请输入一个成绩：&#39;))
if 90&amp;lt;=score&amp;lt;=100:
    print(&#39;A&#39;)
elif 80&amp;lt;=score&amp;lt;90:
    print(&#39;B&#39;)
elif 70&amp;lt;=score&amp;lt;80:
    print(&#39;C&#39;)
elif 60&amp;lt;=score&amp;lt;70:
    print(&#39;D&#39;)
elif 0&amp;lt;=score&amp;lt;60:
    print(&#39;E&#39;)
else:
    print(&#39;不是有效成绩&#39;)

#嵌套if的使用
answer=input(&#39;您是会员吗?y/n&#39;)
money=float(input(&#39;请输入您的购物金额：&#39;))
if answer==&#39;y&#39;:
    if money=200:
        print(money*0.8)
    elif money=100:
        print(money*0.9)
    else:
        print(money)
else:
    if money=200:
        print(money*0.95)
    else:
        print(money)
</code></pre>
<h3 id="条件表达式和pass语句"><a href="#条件表达式和pass语句" class="headerlink" title="条件表达式和pass语句"></a>条件表达式和pass语句</h3><pre><code class="lang-python">num1=int(input(&#39;请输入第一个整数&#39;))
num2=int(input(&#39;请输入第二个整数&#39;))
&#39;&#39;&#39;if num1=num2:
    print(num1,&#39;大于等于&#39;,num2)
else:
    print(num1,&#39;小于&#39;,num2)&#39;&#39;&#39;

print(str(num1)+&#39;大于等于&#39;+str(num2) if num1=num2 else str(num1)+&#39;小于&#39;+str(num2))

#pass语句，只是一个占位符
answer=input(&#39;您是会员吗?y/n&#39;)
if answer==&#39;y&#39;:
    pass
else:
    pass
</code></pre>
<h3 id="range-函数的使用"><a href="#range-函数的使用" class="headerlink" title="range()函数的使用"></a>range()函数的使用</h3><pre><code class="lang-python">#range()的三种创建方式
# 第一种创建方式
r=range(10) #默认从零开始，默认相差1称为步长
print(r) #range(0,10)
print(list(r)) #用于查看range对象中的整数序列 --list是列表的意思

# 第二种创建方式
r=range(1,10) #指定起始值，从1开始到10结束(不包含10)
print(list(r))

#第三种创建方式
r=range(1,100,2) #步长为2
print(list(r))

print(9 in r)
print(8 not in r)
</code></pre>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre><code class="lang-python">sum=0
a=0
while a&amp;lt;5:
    sum+=a
    a+=1
print(sum)

sum=0
a=1
while a&amp;lt;=100:
    if not bool(a%2):             # if a%2==0:
        sum+=a
    a+=1
print(sum)
</code></pre>
<h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for_in循环"></a>for_in循环</h3><pre><code class="lang-python">for item in &#39;python&#39;:
    print(item)
for i in range(10):
    print(i)
for _ in range(5):
    print(&#39;人生苦短&#39;)

# 100到999之间的水仙花数
for item in range(100,1000):
    ge=item%10
    shi=item//10%10
    bai=item//100
    #print(bai,shi,ge)
    if ge**3+shi**3+bai**3==item:
        print(item)
</code></pre>
<h3 id="流程控制语句break和continue-else语句和嵌套循环"><a href="#流程控制语句break和continue-else语句和嵌套循环" class="headerlink" title="流程控制语句break和continue,else语句和嵌套循环"></a>流程控制语句break和continue,else语句和嵌套循环</h3><pre><code class="lang-python">for item in range(3):
    pwd=input(&#39;请输入密码：&#39;)
    if pwd==&#39;8888&#39;:
        print(&#39;密码正确&#39;)
        break
    else:
        print(&#39;密码不正确&#39;)
else:
    print(&#39;对不起，三次密码均输入错误&#39;)

a=0
while a&amp;lt;3:
    pwd=input(&#39;请输入密码：&#39;)
    if pwd==&#39;8888&#39;:
        print(&#39;密码正确&#39;)
        break
    else:
        print(&#39;密码不正确&#39;)
    a+=1

for item in range (1,51):
    if item%5!=0:
        continue
    print(item)

for i in range(1,4):  #行表
    for j in range(1,5): 
        print(&#39;*&#39;,end=&#39;\t&#39;) #不换行输出
    print()    #打行

for i in range(1,10):
    for j in range(1,i+1):
        print(i,&#39;*&#39;,j,&#39;=&#39;,i*j,end=&#39;\t&#39;)
    print()

for i in range(5):
    for j in range(1,11):
        if j%2==0:
            #break
            continue
        print(j,end=&#39;\t&#39;)
    print()
</code></pre>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code class="lang-python"># 列表对象
# 创建列表的第一种方式,[]
lst=[&#39;hello&#39;,&#39;world&#39;,98,&#39;hello&#39;]
print(id(lst))
print(type(lst))
print(lst)
print(lst[0],lst[-4])
# 创建列表的第二种方式,list()
lst2=list([&#39;hello&#39;,&#39;world&#39;,98])
print(id(lst2))
print(type(lst2))
print(lst2)

lst=[&#39;hello&#39;,&#39;world&#39;,98,&#39;hello&#39;]
print(lst.index(&#39;hello&#39;)) #列表中有相同元素只返回列表中相同元素的的第一个元素的索引
# print(lst.index(&#39;python&#39;)) #ValueError: &#39;python&#39; is not in list
# print(lst.index(&#39;hello&#39;,1,3)) #ValueError: &#39;hello&#39; is not in list  1-&#39;world&#39; 2-98 不包括3
print(lst.index(&#39;hello&#39;,1,4))

lst=[&#39;hello&#39;,&#39;world&#39;,98,&#39;hello&#39;,&#39;world&#39;,234]
# 获取索引为2的
print(lst[2])
# 获取索引为-3的
print(lst[-3])
# 获取索引为10的
print(lst[10]) # IndexError: list index out of range

lst=[10,20,30,40,50,60,70,80]
print(lst[1:6:1])
print(lst[1:6]) #默认步长为1
print(lst[1:6:])
print(lst[1:6:2]) #步长为2
print(lst[:6:2])
print(lst[1::2])
print(lst[::2])
print(lst[::])
# 步长为负数
print(lst[::-1])
print(lst[7::-1])
print(lst[6:0:-2])
print(&#39;原列表&#39;,id(lst)) 
lst2=lst[1:6:1]
print(&#39;切的片段&#39;,id(lst2))

lst=[10,20,&#39;python&#39;,&#39;hello&#39;]
print(10 in lst) #判断
print(10 not in lst)
for item in lst: #遍历
    print(item)

# 向列表末尾添加元素
lst=[10,20,30]
print(lst,id(lst))
lst.append(100)
print(lst,id(lst))
lst2=[&#39;hello&#39;,&#39;world&#39;]
# lst.append(lst2) # 将lst2作为一个元素添加到列表末尾
lst.extend(lst2) # 向列表末尾添加多个元素
print(lst)
lst.insert(1,90) # 在任意位置上添加一个元素
print(lst)
lst3=[True,False,&#39;hello&#39;]
lst[1:]=lst3 # 在任意位置添加N个元素
print(lst)

lst=[10,20,30,40,50,60,30]
lst.remove(30) #从列表中移除一个元素，如果有重复元素只移除第一个元素
print(lst)
# lst.remove(100) #ValueError: list.remove(x): x not in list
#pop()根据索引移除元素
lst.pop(1)
print(lst)
# lst.pop(5) #IndexError: pop index out of range
lst.pop() #如果不指定参数，将删除最后一个参数
print(lst)
new_lst=lst[1:3]
print(&#39;原列表&#39;,lst)
print(&#39;切片后列表&#39;,new_lst)
lst[1:3]=[]
print(lst)
lst.clear() #清除列表中的所有元素
print(lst)
del lst #将列表对象删除
# print(lst) # NameError: name &#39;lst&#39; is not defined. Did you mean: &#39;list&#39;?

lst=[10,20,30,40]
lst[2]=100 #修改一个值
print(lst)
lst[1:3]=[300,400,500,600]
print(lst)

lst=[20,40,10,98,54]
print(&#39;排序前&#39;,lst,id(lst))
lst.sort() #升序
print(&#39;排序后&#39;,lst,id(lst))
lst.sort(reverse=True) #降序
print(lst)
lst.sort(reverse=False) #升序
print(lst)

lst=[20,40,10,98,54]
new_lst=sorted(lst) #产生一个新列表 升序
print(lst)
print(new_lst)
desc_lst=sorted(lst,reverse=True) #降序
print(desc_lst)

#列表生成式
lst=[i*i for i in range(1,10)]
print(lst)
lst2=[i for i in range(2,11,2)]
print(lst2)
</code></pre>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><pre><code class="lang-python"># 字典
# 使用花括号
scores=&#123;&#39;张三&#39;:100,&#39;李四&#39;:98,&#39;王五&#39;:45&#125;
print(scores)
# 使用内置函数
stu=dict(name=&#39;jack&#39;,age=20)
print(stu)

# 获取字典中的值,使用[]
print(scores[&#39;张三&#39;])
# print(scores[&#39;陈六&#39;]) # KeyError: &#39;陈六&#39;
# 使用get()
print(scores.get(&#39;张三&#39;))
print(scores.get(&#39;陈六&#39;)) # None
print(scores.get(&#39;马七&#39;,99)) # 99是在查找‘马七’所对的value不存在时，提供的一个默认值

scores=&#123;&#39;张三&#39;:100,&#39;李四&#39;:98,&#39;王五&#39;:45&#125;
print(&quot;张三&quot; in scores)
print(&quot;张三&quot; not in scores)
del scores[&#39;张三&#39;] # 删除指定的key-value对
# scores.clear() # 清空字典的元素
print(scores)
scores[&#39;陈六&#39;]=98 #新增元素
print(scores)
scores[&#39;陈六&#39;]=100 # 修改元素
print(scores)

scores=&#123;&#39;张三&#39;:100,&#39;李四&#39;:98,&#39;王五&#39;:45&#125;
# 获取所有的key
keys=scores.keys()
print(keys)
print(type(keys))
print(list(keys)) # 将所有的key组成的视图转成列表
# 获取所有的value
values=scores.values()
print(values)
print(type(values))
print(list(values))
#获取所有的key-value对
items=scores.items()
print(items)
print(list(items)) # 转换之后的列表元素是由元组组成

scores=&#123;&#39;张三&#39;:100,&#39;李四&#39;:98,&#39;王五&#39;:45&#125;
# 字典元素的遍历
for item in scores:
    print(item,scores[item],scores.get(item))

d=&#123;&#39;name&#39;:&#39;张三&#39;,&#39;name&#39;:&#39;李四&#39;&#125; # key不允许重复
print(d)
d=&#123;&#39;name&#39;:&#39;张三&#39;,&#39;nikename&#39;:&#39;张三&#39;&#125; # value允许重复
print(d)

# 字典生成式 
items=[&#39;Fruits&#39;,&#39;Books&#39;,&#39;Others&#39;]
prices=[96,78,85,100,120]
d=&#123;item.upper():price   for item,price in zip(items,prices)&#125;
print(d)
lst=zip(items,prices)
print(list(lst))
</code></pre>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><pre><code class="lang-python">&#39;&#39;&#39;可变序列 列表，字典&#39;&#39;&#39;
lst=[10,20,45]
print(id(lst))
lst.append(200)
print(id(lst))
&#39;&#39;&#39;不可变序列 字符串，元组&#39;&#39;&#39;
s=&#39;hello&#39;
print(id(s))
s=s+&#39;world&#39;
print(id(s))
print(s)

# 元组的创建方式
# 第一种，用()
t=(&#39;Python&#39;,&#39;world&#39;,98)
print(t)
print(type(t))

t2=&#39;Python&#39;,&#39;world&#39;,98 # 省略了小括号
print(t2)
print(type(t2))

t=(&#39;Python&#39;,) # 只包含一个元组的元素需要使用逗号和小括号，不然为str类型(此处)
print(t)
print(type(t))

# 第二种创建方式，内置函数tuple()
t1=tuple((&#39;Python&#39;,&#39;world&#39;,98))
print(t1)
print(type(t1))

# 空列表
lst=[]
lst1=list()
# 空字典
d=&#123;&#125;
d1=dict()
# 空元组
t=()
t1=tuple()
print(&#39;空列表&#39;,lst,lst1)
print(&#39;空字典&#39;,d,d1)
print(&#39;空元组&#39;,t,t1)

t=(10,[20,30],9)
print(type(t))
print(t[0],type(t[0]),id(t[0]))
print(t[1],type(t[1]),id(t[1]))
print(t[2],type(t[2]),id(t[2]))
# 尝试将t[1]修改为100
print(id(100))
#t[1]=100 #元组不允许修改元素
#由于[20,30]列表，而列表是可变序列，所以可以向列中添加元素，而列表的内存地址不变
t[1].append(100) #向列表中添加元素
print(t,id(t[1]))

#元组的遍历
t=(&#39;Python&#39;,&#39;world&#39;,98)
#1.索引
print(t[0])
print(t[1])
print(t[2])
# print(t[3]) #IndexError: tuple index out of range
#2.遍历
for item in t:
    print(item)
</code></pre>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><pre><code class="lang-python"># 集合的创建方式
# 1.&#123;&#125;
s=&#123;2,3,4,5,6,7,7&#125; #集合中的元素不允许重复
print(s)
#2.set()
s1=set(range(6))
print(s1,type(s1))
s2=set([1,2,4,5,5,5,6,6])
print(s2,type(s2))
s3=set((1,2,4,4,5,65)) #集合中的元素是无序的
print(s3,type(s3))
s4=set(&#39;python&#39;)
print(s4,type(s4))
s5=set(&#123;12,4,34,55,66,44,4&#125;)
print(s5,type(s5))

# 定义一个空集合
s6=&#123;&#125; #dict字典类型
print(type(s6))
s7=set()
print(type(s7))

#集合的相关操作
#判断操作
s=&#123;10,2,0,30,40,50&#125;
print(10 in s)
print(100 in s)
print(0 not in s)
#新增操作
s.add(80) #一次添加一个
print(s)
s.update(&#123;200,300,4000&#125;) #一次至少添加一个元素
print(s)
s.update([100,99,6])
s.update((78,56,48))
print(s)
#删除操作
s.remove(10)
print(s)
# s.remove(500) #KeyError: 500
# print(s)
# s.discard(500) #没有，不报错
# print(s)
s.pop() #只能删除第一个，且不能添加参数
print(s)
s.clear() #清空集合
print(s)

# 两个集合是否相等(元素相同，就相等)
s=&#123;10,20,30,40&#125;
s2=&#123;20,30,40,10&#125;
print(s==s2) #T
print(s!=s2) #F
#子集和超集
s1=&#123;10,20,30,40,50,60&#125;
s2=&#123;10,20,30,40&#125;
s3=&#123;10,20,90&#125;
print(s2.issubset(s1)) #T
print(s3.issubset(s1)) #F
print(s1.issuperset(s2)) #T
print(s1.issuperset(s3)) #F
#交集
print(s2.isdisjoint(s3)) #F - 有交集
s4=&#123;100,200,300&#125;
print(s2.isdisjoint(s4)) #T - 没有交集

# 集合的数学操作
#(1)交集
s1=&#123;10,20,30,40&#125;
s2=&#123;20,30,40,50,60&#125;
print(s1.intersection(s2))
print(s1&amp;amp;s2)

#(2)并集
print(s1.union(s2))
print(s1|s2)

#(3)差集
print(s1.difference(s2)) #s1有s2没有
print(s1-s2)
print(s2.difference(s1))

#(4)对称差集
print(s1.symmetric_difference(s2)) #集合交集以外的元素
print(s1^s2)

#集合生成式
s=&#123;i*i for i in range(10)&#125;
print(s)
</code></pre>
<p><img src="/img/python初阶语法/集合1.png" alt=""></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code class="lang-python">#字符串
#字符串的定义及驻留机制
a=&#39;python&#39;
b=&quot;python&quot;
c=&#39;&#39;&#39;python&#39;&#39;&#39;
print(a,id(a))
print(b,id(b))
print(c,id(c))
</code></pre>
<p><img src="/img/python初阶语法/字符串1.png" alt=""><br><strong>后面把a=sys.intern(b)中的 . 打成 , 报错，请忽略。</strong><br><img src="/img/python初阶语法/字符串2.png" alt=""><br><strong>这里读者可以自行验证</strong><br><img src="/img/python初阶语法/字符串3.png" alt=""></p>
<pre><code class="lang-python">#字符串查询操作
s=&#39;hello,hello&#39;
print(s.index(&#39;lo&#39;)) #第一次出现的位置
print(s.find(&#39;lo&#39;))
print(s.rindex(&#39;lo&#39;)) #最后一次出现的位置
print(s.rfind(&#39;lo&#39;))

# print(s.index(&#39;k&#39;)) #ValueError: substring not found 不存在
print(s.find(&#39;k&#39;)) #-1 不存在

#字符串的大小写转换操作
s=&#39;HelloWorld,wa&#39;
print(s.upper(),id(s.upper())) #全转成大写
print(s,id(s))
print(s.lower()) #全转成小写
print(s.swapcase()) #大转小，小转大
print(s.capitalize()) #第一个字符大写，其余小写
print(s.title()) #每个单词首字母大写，其余小写

#字符串内容对齐操作
s=&#39;hello,Python&#39;
#居中对齐
print(s.center(20,&#39;*&#39;)) 
#左对齐
print(s.ljust(20,&#39;*&#39;)) 
print(s.ljust(10))
print(s.ljust(20))
#右对齐
print(s.rjust(20,&#39;*&#39;))
print(s.rjust(20))
print(s.rjust(10))
#右对齐，左边用0填充
print(s.zfill(20))
print(s.zfill(10))
print(&#39;-8910&#39;.zfill(8))

#字符串的劈分操作
s=&#39;hello world Python&#39;
print(s.split())
s1=&#39;hello|world|Python&#39;
print(s1.split())
print(s1.split(sep=&#39;|&#39;))
print(s1.split(sep=&#39;|&#39;,maxsplit=1))
#从右侧分
print(s1.rsplit(sep=&#39;|&#39;,maxsplit=1))

#字符串判断的相关方法
#合法标识符
s=&#39;hello,python&#39;
print(s.isidentifier()) #F
print(&#39;hello&#39;.isidentifier()) #T
print(&#39;张三_123&#39;.isidentifier()) #T
#空白字符
print(&#39;\t&#39;.isspace()) #T
print(&#39; &#39;.isspace()) #T
#字母
print(&#39;abc&#39;.isalpha()) #T
print(&#39;张三&#39;.isalpha()) #T
print(&#39;张三1&#39;.isalpha()) #F
#十进制数字
print(&#39;123&#39;.isdecimal()) #T
print(&#39;123四&#39;.isdecimal()) #F
print(&#39;ⅡⅢⅣ&#39;.isdecimal()) #F
#数字
print(&#39;123&#39;.isnumeric()) #T
print(&#39;123四&#39;.isnumeric()) #T
print(&#39;ⅡⅢⅣ&#39;.isnumeric()) #T
print(&#39;壹贰叁&#39;.isnumeric()) #T
#字母和数字
print(&#39;abc1&#39;.isalnum()) #T
print(&#39;张三123&#39;.isalnum()) #T
print(&#39;abc!&#39;.isalnum()) #F

#字符串的其他操作
#字符串的替换
s=&#39;hello,Python&#39;
print(s.replace(&#39;Python&#39;,&#39;Java&#39;))
s1=&#39;hello,Python,Python,Python&#39;
print(s1.replace(&#39;Python&#39;,&#39;Java&#39;,2)) #第三个次数指定替换次数
#字符串的合并
lst=[&#39;hello&#39;,&#39;java&#39;,&#39;python&#39;]
print(&#39;|&#39;.join(lst))
print(&#39;&#39;.join(lst))

t=(&#39;hello&#39;,&#39;java&#39;,&#39;python&#39;)
print(&#39; &#39;.join(t))

print(&#39;*&#39;.join(&#39;python&#39;))

#字符串的比较操作
print(&#39;apple&#39;&#39;app&#39;) #T
print(&#39;apple&#39;&#39;banana&#39;) #F, 9798 F
print(ord(&#39;a&#39;),ord(&#39;b&#39;)) #原始值这里是字母的ascll码
print(ord(&#39;刘&#39;))
print(chr(97),chr(98))
print(chr(21016))

&#39;&#39;&#39;==和is的区别
==比较的是value
is 比较的是 id&#39;&#39;&#39;
a=b=&#39;python&#39;
c=&#39;python&#39;
print(a==b) #T
print(b==c) #T
print(a is b) #T
print(a is c) #T
print(id(a)) #2383540093936
print(id(b)) #2383540093936
print(id(c)) #2383540093936


#字符串的切片操作
s=&#39;hello,python&#39;
print(s[:5]) #没有指定起始位置，从0开始
print(s[6:]) #没有指定结束位置，所以切到字符串最后一个元素
s1=&#39;!&#39;
newstr=s[:5]+s1+s[6:]
print(newstr) 
print(id(s))
print(id(s[:5]))
print(id(s[6:]))
print(id(s1))
print(id(newstr))

print(s[1:5:1]) #完整写法 从一切到五步长为一
print(s[::2]) #从0开始
print(s[::-1]) #从最后一个元素开始
print(s[-6::1])

#格式化字符串
# % 占位符
name=&#39;张三&#39;
age=20
print(&#39;我叫%s,今年%d岁&#39; % (name,age))
# &#123;&#125;
print(&#39;我叫&#123;0&#125;,今年&#123;1&#125;岁&#39;.format(name,age))
# f-string
print(f&#39;我叫&#123;name&#125;,今年&#123;age&#125;岁&#39;)

#宽度和精度
print(&#39;%10d&#39; % 99) #10个宽度
print(&#39;%.3f&#39; % 3.1415926) #.3表示小数点后三位
print(&#39;%10.3f&#39; % 3.1415926) #宽度为10，保留三位小数
print(&#39;hellohello&#39;)
print(&#39;&#123;0:.3&#125;&#39;.format(3.1415926)) #.3表示一共三位数
print(&#39;&#123;0:.3f&#125;&#39;.format(3.1415926)) #.3f表示3位小数
print(&#39;&#123;0:10.3f&#125;&#39;.format(3.1415926)) #一共10位3位小数

#字符串的编码转换
s=&#39;天涯共此时&#39;
#编码
print(s.encode(encoding=&#39;GBK&#39;)) #GBK这种编码格式中一个中文占两个字节
print(s.encode(encoding=&#39;UTF-8&#39;)) #UTF-8中一个中文三个字节
#解码
#byte代表的就是一个二进制数据(字节类型的数据)
byte=s.encode(encoding=&#39;GBK&#39;) #编码
print(byte.decode(encoding=&#39;GBK&#39;)) #解码
byte=s.encode(encoding=&#39;UTF-8&#39;)
print(byte.decode(encoding=&#39;UTF-8&#39;))
</code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><pre><code class="lang-python">#函数
#函数的定义和调用
def calc(a,b):  #a,b为形式参数，形参位置是在函数的定义处
    c=a+b
    return c

result=calc(10,20)  #10,20称为实际参数的值，实参的位置是函数的调用处
print(result)

#函数参数的传递
res=calc(b=10,a=20)  #=左边的变量名称为 关键字参数
print(res)

#函数参数传递的内存分析
def fun(arg1,arg2):
    print(&#39;arg1=&#39;,arg1)
    print(&#39;arg2=&#39;,arg2)
    arg1=100
    arg2.append(10)
    print(&#39;arg1=&#39;,arg1)
    print(&#39;arg2=&#39;,arg2)

n1=11
n2=[22,33,44]
print(&#39;n1=&#39;,n1)
print(&#39;n2=&#39;,n2)
print(&#39;-------&#39;)
fun(n1,n2)
print(&#39;n1=&#39;,n1)
print(&#39;n2=&#39;,n2)

&#39;&#39;&#39;在函数调用过程中,进行参数的传递
如果是不可变对象,在函数体的修改不会形象实参的值 arg1修改为100,不会影响n1的值
如果是可变对象，在函数体的修改会影响到实参的值 arg2的修改,append(10),会影响到n2的值&#39;&#39;&#39;

#函数的返回值
def fun(num):
    odd=[]
    even=[]
    for i in num:
        if i % 2: #bool(0)=False
            odd.append(i)
        else:
            even.append(i)
    return odd,even

print(fun([10,29,34,23,44,53,55]))

&#39;&#39;&#39;
(1)如果函数没有返回值【函数执行完毕后，不需要给调用处提供数据】 return可以省略
(2)如果函数有一个返回值，直接返回类型
(3)如果函数有多个返回值，返回结果为元组
&#39;&#39;&#39;
def fun1():
    print(&#39;hello&#39;)
    #return

fun1()

def fun2():
    return &#39;hello&#39;

res=fun2()
print(res)

def fun3():
    return &#39;hello&#39;,&#39;world&#39;

print(fun3())
&#39;&#39;&#39;函数在定义时，是否需要返回值，视情况而定&#39;&#39;&#39;

#默认值参数
def fun(a,b=10):  #b为默认值
    print(a,b)

#函数的调用
fun(100)
fun(20,30)

print(&#39;hello&#39;,end=&#39;\t&#39;)
print(&#39;world&#39;)

#函数的参数定义
def fun(*args):  #函数定义时，个数可变的位置参数
    print(args)

fun(10)
fun(10,20,30)

def fun1(**args): #个数可变的关键字参数
    print(args)

fun1(a=10)
fun1(a=20,b=20,c=40)

&#39;&#39;&#39; def fun2(*args,*a):
       pass
    报错，个数可变的位置参数，只能是一个
    def fun2(*args,*a):
        pass
    报错，个数可变的关键字参数，只能是一个&#39;&#39;&#39;

def fun2(*args1,**args2):
    pass

&#39;&#39;&#39; def fun3(**args1,*args2):
        pass
在一个函数定义的过程中，既有个数可变的关键字参数，也有个数可变的位置形参，要求个数可变的位置形参，放在个数可变的关键字形参之前&#39;&#39;&#39;

#函数参数总结
def fun(a,b,c):  # a,b,c在函数的定义处，所以是形式参数
    print(&#39;a=&#39;,a)
    print(&#39;b=&#39;,b)
    print(&#39;c=&#39;,c)

#函数的调用
fun(10,20,30)  #函数调用时的参数传递，称为位置传参
lst=[11,22,33]
fun(*lst)  #函数调用时，将列表的每个元素都转换为位置实参传入
print(&#39;--------&#39;)
fun(a=100,c=300,b=200)  #关键字实参
dic=&#123;&quot;a&quot;:111,&#39;b&#39;:222,&#39;c&#39;:333&#125;
fun(**dic)  #在函数调用时，将字典的键值对都转换为关键字实参传入

def fun4(a,b,*,c,d):  #从*之后的参数，在函数调用时，只能采用关键字参数传递
    print(&#39;a=&#39;,a)
    print(&#39;b=&#39;,b)
    print(&#39;c=&#39;,c)
    print(&#39;d=&#39;,d)

#fun4(10,20,30,40) #位置实参传递
fun4(a=10,b=20,c=10,d=40) #关键字实参传递
fun4(10,20,c=30,d=40) #前两个位置实参传递，后两个关键字实参传递

&#39;&#39;&#39;函数定义时形参的顺序问题&#39;&#39;&#39;
def fun5(a,b,*,c,d,**args):
    pass
def fun6(*args,**args1):
    pass
def fun7(a,b=10,*args,**args1):
    pass

#变量的作用域
def fun(a,b):
    c=a+b  #c,就称为局部变量，因为c在函数体内进行定义的变量，a，b为函数的形参，作用范围也是函数内部，相当于局部变量 
    print(c)

name=&#39;刘&#39;   #全局变量
print(name)
def fun1():
    print(name)
fun1()

def fun3():
    global age  #函数内部定义的变量，局部变量，其用global声明，这个变量变为全局变量
    age=20
    print(age)
fun3()
print(age)

#递归函数
def fac(n):
    if n==1:
        return 1
    else:
        return n*fac(n-1)

print(fac(9))

#斐波那契数列
def fib(n):
    if n==1:
        return 1
    elif n==2:
        return 1
    else:
        return fib(n-1)+fib(n-2)

print(fib(6))

for i in range(1,7):
    print(fib(i))
</code></pre>
<h3 id="bug"><a href="#bug" class="headerlink" title="bug"></a>bug</h3><pre><code class="lang-python">#bug
#bug的常见类型
#1.
age=input(&#39;请输入你的年龄：&#39;)
print(type(age))
# if age=18:  #TypeError: &#39;=&#39; not supported between instances of &#39;str&#39; and &#39;int&#39;
if int(age)=18:
    print(&#39;你是成年人了&#39;)

#2.
# while i&amp;lt;10:
#     print（i）
i=0
while i&amp;lt;10:
    print(i)
    i+=1

#3.
for i in range(3):
    uname=input(&#39;请输入用户名：&#39;)
    pwd=input(&#39;请输入密码：&#39;)
    # if uname=&#39;admin&#39; and pwd=&#39;admin&#39;:
    if uname==&#39;admin&#39; and pwd==&#39;admin&#39;:
        print(&#39;登陆成功！&#39;)
        break
    # else
    else:
        print(&#39;输入有误&#39;)
else:
    print(&#39;对不起，三次均输入错误&#39;)

#4.索引越界问题IndexError
lst=[11,22,33,44]
# print(lst[4])  #list index out of range
print(lst[3])

#5.append()方法的使用不熟练
lst=[]
# lst=append(&#39;A&#39;,&#39;B&#39;,&#39;C&#39;)
lst.append(&#39;A&#39;)
lst.append(&#39;B&#39;)
lst.append(&#39;C&#39;)
print(lst)

#被动掉坑问题
&#39;&#39;&#39; n1=int(input(&#39;请输入一个整数：&#39;))
    n2=int(input(&#39;请输入另一个整数：&#39;))
    result=n1/n2
    print(&#39;结果为：&#39;,result)&#39;&#39;&#39;
#try...except结构
try:
    n1=int(input(&#39;请输入一个整数：&#39;))
    n2=int(input(&#39;请输入另一个整数：&#39;))
    result=n1/n2
    print(&#39;结果为：&#39;,result)
except ZeroDivisionError:
    print(&#39;对不起，除数不允许为零&#39;)
except ValueError:
    print(&#39;不能将字符转换为数字&#39;)
print(&#39;程序结束&#39;)
#try...except...else结构
try:
    n1=int(input(&#39;请输入一个整数：&#39;))
    n2=int(input(&#39;请输入另一个整数：&#39;))
    result=n1/n2
except BaseException as e:
    print(&#39;出错了&#39;,e)
else:
    print(&#39;结果为：&#39;,result)
#try...except...else...finally结构
try:
    n1=int(input(&#39;请输入一个整数：&#39;))
    n2=int(input(&#39;请输入另一个整数：&#39;))
    result=n1/n2
except BaseException as e:
    print(&#39;出错了&#39;,e)
else:
    print(&#39;结果为：&#39;,result)
finally:
    print(&#39;谢谢您的使用&#39;)
print(&#39;程序结束&#39;)
</code></pre>
<p><img src="/img/python初阶语法/bug1.png" alt=""></p>
<pre><code class="lang-python">#常见的异常类型
# print(10/0)  #ZeroDivisionError

lst=[11,22,33,44]
# print(lst[4])  #IndexError

dic=&#123;&#39;name&#39;:&#39;张三&#39;,&#39;age&#39;:20&#125;
# print(dic[&#39;gender&#39;])  #KeyError

# print(num)  #NameError

# int a=20  #SyntaxError

#a=int(&#39;hello&#39;)  #ValueError

#traceback模块的使用
import traceback
try:
    print(&#39;--------------&#39;)
    print(1/0)
except:
    traceback.print_exc()
</code></pre>
<h3 id="编程的两大思想-面向过程、面向对象"><a href="#编程的两大思想-面向过程、面向对象" class="headerlink" title="编程的两大思想-面向过程、面向对象"></a>编程的两大思想-面向过程、面向对象</h3><p><img src="/img/python初阶语法/编程的两大思想-面向过程、面向对象1.png" alt=""></p>
<pre><code class="lang-python">#类与对象
#定义python中的类
class Student:  #Student为类的名称（类名）由一个或多个单词组成，每个单词首字母大写，其余小写
    native_place=&#39;吉林&#39;  #直接写在类里的变量，成为类属性
    def __init__(self,name,age):
        self.name=name  #self.name 称为实例属性，进行了一个赋值操作，将局部变量的name的值赋给实体属性
        self.age=age
    #实例方法
    def eat(self):
        print(self.name+&#39;在吃饭&#39;)
    #静态方法
    @staticmethod
    def sm():
        print(&#39;静态方法&#39;)
    #类方法
    @classmethod
    def cm(cls):
        print(&#39;类方法&#39;)
#在类之外定义的称为函数，再类之内定义的称为方法
def drink():
    print(&#39;喝水&#39;)

#创建Student类的对象
stu1=Student(&#39;张三&#39;,20)
stu2=Student(&#39;李四&#39;,30)
print(id(stu1))
print(type(stu1))
print(stu1)
print(id(Student))
print(type(Student))
print(Student)
stu1.eat()  #对象名.方法名()
Student.eat(stu1)  #类名.方法名(类的对象)--实际上就是方法定义处的self
print(stu1.name)
print(stu1.age)

#类属性的使用方式
#print(Student.native_place)
print(stu1.native_place)
print(stu2.native_place)
Student.native_place=&#39;天津&#39;
print(stu1.native_place)
print(stu2.native_place)
#类方法的使用方式
Student.cm()
#静态方法的使用方式
Student.sm()

#动态绑定属性和方法
stu2.gender=&#39;女&#39;  #动态绑定性别属性
# print(stu1.name,stu1.age,stu1.gender)  #AttributeError: &#39;Student&#39; object has no attribute &#39;gender&#39;
print(stu2.name,stu2.age,stu2.gender)
stu1.eat()
stu2.eat()
def show():
    print(&#39;定义在类之外的，称为函数&#39;)
stu1.show=show  #动态绑定方法
stu1.show()
# stu2.show()  #AttributeError: &#39;Student&#39; object has no attribute &#39;show&#39;
</code></pre>
<h3 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h3><p><img src="/img/python初阶语法/面向对象的三大特征1.png" alt=""></p>
<pre><code class="lang-python">#面向对象的三大特征
#封装
class Car:
    def __init__(self,brand):
        self.brand=brand
    def start(self):
        print(&#39;汽车已启动...&#39;)

car=Car(&#39;宝马x5&#39;)
car.start()
print(car.brand)

class Student:
    def __init__(self,name,age):
        self.name=name
        self.__age=age  #年龄不希望在类的外部被使用，所以加__
    def show(self):
        print(self.name,self.__age)

stu=Student(&#39;张三&#39;,20)
stu.show()
#在类的外部使用name和age
print(stu.name)
# print(stu.__age)  #AttributeError: &#39;Student&#39; object has no attribute &#39;__age&#39;
# print(dir(stu))  #获取对象所有的属性
print(stu._Student__age)  #在类的外部可以通过 _Student__age 进行访问

#继承
class Person(object):
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def info(self):
        print(self.name,self.age)
#定义子类
class Student(Person):
    def __init__(self, name, age,score):
        super().__init__(name, age)
        self.score=score
    def info(self):  #方法的重写
        super().info()
        print(self.score)
class Teacher(Person):
    def __init__(self, name, age,teachofyear):
        super().__init__(name, age)
        self.teachofyear=teachofyear
    def info(self):  #方法的重写
        super().info()
        print(self.teachofyear)
#测试
stu=Student(&#39;Jack&#39;,20,&#39;1001&#39;)
stu.info()
tea=Teacher(&#39;Tom&#39;,40,20)
tea.info()

#object类 -- 所有类的父类
class Student:
    def __init__(self,name,age):
        self.name=name
        self.age=age
    def __str__(self):
        return &#39;我的名字是&#123;0&#125;，今年&#123;1&#125;岁&#39;.format(self.name,self.age)

stu=Student(&#39;jack&#39;,20)
print(dir(stu))
print(stu)
print(type(stu))

#多态
class Animal(object):
    def eat(self):
        print(&#39;动物会吃&#39;)
class Dog(Animal):
    def eat(self):
        print(&#39;狗吃骨头&#39;)
class Cat(Animal):
    def eat(self):
        print(&#39;猫吃鱼&#39;)
class Person:
    def eat(self):
        print(&#39;人吃五谷杂粮&#39;)
#定义一个函数
def fun(obj):
    obj.eat()
#调用
fun(Cat())
fun(Dog())
fun(Animal())
fun(Person())
</code></pre>
<p><img src="/img/python初阶语法/面向对象的三大特征2.png" alt=""></p>
<pre><code class="lang-python">#特殊方法和特殊属性
#特殊属性
class A:
    pass
class B:
    pass
class C(A,B):
    def __init__(self,name,age):
        self.name=name
        self.age=age
class D(A):
    pass
#创建C类对象
x=C(&#39;jack&#39;,20)  #x是C类型的一个实例对象
print(x.__dict__)  #实例对象的属性字典
print(C.__dict__)
print(x.__class__)  #输出对象所属的类型 &amp;lt;class &#39;__main__.C&#39;
print(C.__bases__)  #C类的父类类型的元素
print(C.__base__)  #类的基类
print(C.__mro__)  #类的层次结构
print(A.__subclasses__())  #子类的列表


#类的方法
a=20
b=100
c=a+b  #两个整数类型的对象的相加操作
d=a.__add__(b)
print(c)
print(d)

class Student:
    def __init__(self,name):
        self.name=name
    def __add__(self,other):  #特殊方法
        return self.name+other.name
    def __len__(self):
        return len(self.name)
stu1=Student(&#39;张三&#39;)
stu2=Student(&#39;李四&#39;)
s=stu1+stu2  #实现两个对象的加法运算
print(s)
s=stu1.__add__(stu2)
print(s)

lst=[11,22,33,44]
print(len(lst))
print(lst.__len__())
print(len(stu1))

class Person(object):
    def __new__(cls,*args,**kwargs):
        print(&#39;__new__被调用执行了,cls的id值为&#123;0&#125;&#39;.format(id(cls)))
        obj=super().__new__(cls)
        print(&#39;创建的对象的id为:&#123;0&#125;&#39;.format(id(obj)))
        return obj        

    def __init__(self,name,age):
        print(&#39;__init__被调用了,self的id值为:&#123;0&#125;&#39;.format(id(self)))
        self.name=name
        self.age=age

print(&#39;object这个类对象的id为:&#123;0&#125;&#39;.format(id(object)))
print(&#39;Person这个类对象的id为:&#123;0&#125;&#39;.format(id(Person)))

#创建person类的实例对象
p1=Person(&#39;张三&#39;,20)
print(&#39;p1这个Person类的实例对象的id:&#123;0&#125;&#39;.format(id(p1)))

#类的浅拷贝与深拷贝
class CPU:
    pass
class Disk:
    pass
class Computer:
    def __init__(self,cpu,disk):
        self.cpu=cpu
        self.disk=disk

#(1)变量的赋值
cpu1=CPU
cpu2=cpu1
print(cpu1)
print(cpu2)
#(2)类的浅拷贝
disk=Disk()  #创建一个硬盘类的对象
computer=Computer(cpu1,disk)  #创建一个计算机类的对象

#浅拷贝
import copy
print(disk)
computer2=copy.copy(computer)
print(computer,computer.cpu,computer.disk)
print(computer2,computer2.cpu,computer2.disk)

#深拷贝
computer3=copy.deepcopy(computer)
print(computer,computer.cpu,computer.disk)
print(computer3,computer3.cpu,computer3.disk)
</code></pre>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><pre><code class="lang-python">#模块
import math
print(id(math))
print(type(math))
print(math)
print(math.pi)
print(dir(math))
print(math.pow(2,3))
print(math.ceil(9.001))
print(math.floor(9.999))

from math import pi
# from math import pow
print(pi)
print(pow(2,3))
# print(math.pow(2,3))

def add(a,b):
    return a+b

if __name__ == &#39;__main__&#39;:  #只有这个模块时才运行
    print(add(10,20))

#python中常用的内容模块
import sys
import time
import urllib.request
import math
print(sys.getsizeof(24))
print(sys.getsizeof(45))
print(sys.getsizeof(True))
print(sys.getsizeof(False))
print(time.time())
print(time.localtime(time.time()))
print(urllib.request.urlopen(&#39;http://www.baidu.com&#39;).read())
print(math.pi)

#第三方模块的安装  pip install 模块名
import schedule
import time

def job():
    print(&#39;hh&#39;)

schedule.every(3).seconds.do(job)
while True:
    schedule.run_pending()
    time.sleep(1)
</code></pre>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><pre><code class="lang-python">#文件
#读
file=open(&#39;a.txt&#39;,&#39;r&#39;)
print(file.readlines())
file.close()
#写
file=open(&#39;b.txt&#39;,&#39;w&#39;)
file.write(&#39;hello&#39;)
file.close()
#追加
file=open(&#39;b.txt&#39;,&#39;a&#39;)
file.write(&#39;hello&#39;)
file.close()
#复制图片
src_file=open(&#39;logo.png&#39;,&#39;rb&#39;)
target_file=open(&#39;copylogo.png&#39;,&#39;wb&#39;)
target_file.write(src_file.read())
target_file.close()
src_file.close()

#读
file=open(&#39;a.txt&#39;,&#39;r&#39;)
print(file.read(5))  #读取size个字节或字符
print(file.readline())  #读取一行内容
print(file.readlines())  #把文本文件中的每一行都作为独立的字符对象，并将这些对象放入列表返回
#写
file=open(&#39;c.txt&#39;,&#39;a&#39;)
# file.write(&#39;hello&#39;)
lst=[&#39;java&#39;,&#39;go&#39;,&#39;python&#39;]
file.writelines(lst)
file.close()
#移动文件指针
file=open(&#39;c.txt&#39;,&#39;r&#39;)
file.seek(1)  #将文件移动到新的位置
print(file.read())
print(file.tell())  #返回文件指针当前位置
file.close()

file=open(&#39;d.txt&#39;,&#39;a&#39;)
file.write(&#39;hello&#39;)
file.flush()  #把缓冲区的内容写入文件，但不关闭文件
file.write(&#39;world&#39;)
file.close()

#with语句(上下文管理器)
with open(&#39;a.txt&#39;,&#39;r&#39;) as file:
    print(file.read())
#不用手动关闭

#os模块与操作系统相关的一个模块
import os
os.system(&#39;notepad.exe&#39;)
os.system(&#39;calc.exe&#39;)
#直接调用可执行文件
os.startfile(&#39;C:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQ.exe&#39;)
print(os.getcwd())  #返回当前的工作目录
lst=os.listdir(&#39;python&#39;)  #返回指定路径下的文件和目录信息
print(lst)
os.mkdir(&#39;TXT/1.txt&#39;)  #创建目录
os.rmdir(&#39;TXT&#39;)  #删除目录
os.removedirs(&#39;TXT/1.txt&#39;)  #删除多级目录
os.chdir(&#39;C:\\&#39;)  #改变工作路径
print(os.getcwd())

#os.path模块
import os.path
print(os.path.abspath(&#39;1.py&#39;))  #获取文件的绝对路径
print(os.path.exists(&#39;1.py&#39;),os.path.exists(&#39;2.py&#39;))  #判断文件是否存在T/F
print(os.path.join(&#39;C:\\&#39;,&#39;1.py&#39;))  #目录和文件拼接操作
print(os.path.split(&#39;C:\\Users\\26066\\Desktop\\program\\VScode\\.vscode\\python\\helloworld.py&#39;))  #拆分路径和文件
print(os.path.splitext(&#39;helloworld.py&#39;))  #拆分文件和后缀名
print(os.path.basename(&#39;C:\\Users\\26066\\Desktop\\program\\VScode\\.vscode\\python\\helloworld.py&#39;))  #提取文件名
print(os.path.dirname(&#39;C:\\Users\\26066\\Desktop\\program\\VScode\\.vscode\\python\\helloworld.py&#39;))  #提取目录名
print(os.path.isdir(&#39;C:\\Users\\26066\\Desktop\\program\\VScode\\.vscode\\python&#39;))  #判断是否是路径

#获取当前目录下的.txt文件
import os
path=os.getcwd()
lst=os.listdir(path)
for filename in lst:
    if filename.endswith(&#39;.txt&#39;):
        print(filename)

#
import os
path=os.getcwd()
lst_files=os.walk(path)  #遍历目录下的所有文件夹及其子文件
for dirpath,dirname,filename in lst_files:
    # print(dirpath)
    # print(dirname)
    # print(filename)
    for dir in dirname:
        print(os.path.join(dirpath,dir))
    for file in filename:
        print(os.path.join(dirpath,file))
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>加密通信</title>
    <url>/2023/09/15/%E5%8A%A0%E5%AF%86%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="加密通信"><a href="#加密通信" class="headerlink" title="加密通信"></a>加密通信</h1><h3 id="服务端："><a href="#服务端：" class="headerlink" title="服务端："></a>服务端：</h3><pre><code class="lang-python"># 导入 socket 模块
import socket

# 定义异或加密函数，输入明文和密钥，返回加密后的密文
def xor_encrypt(plaintext, key):
    # 将明文和密钥转换为二进制
    plaintext = plaintext.encode()
    key = key.encode()

    # 创建一个空的字节数组，用于存储加密后的数据。
    ciphertext = bytearray()

    # 使用异或加密
    for i in range(len(plaintext)):
        byte = plaintext[i] ^ key[i % len(key)]
        ciphertext.append(byte)

    return bytes(ciphertext)

# 定义服务器的 IP 地址和端口号
ip = &quot;10.22.223.121&quot;
port = 25000

# 创建一个 TCP/IP 套接字并绑定到指定的端口号
serve = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
serve.bind((ip, port))

# 开始监听连接请求
serve.listen()

while True:
    # 接受客户端连接，并返回连接对象与地址信息
    conn, address = serve.accept()

    while True:
        try:
            # 接收客户端发送的数据并解密
            encrypted_data = conn.recv(255)
            if not encrypted_data:
                # 如果没有接收到数据，则跳出循环
                break

            data = xor_encrypt(encrypted_data.decode(), &quot;Fe!EdoWmh^w=U43SO*-#7CZyLRJHjAds&quot;).decode()
            print(data)

            # 加密并发送数据
            input_str = input(&quot;请输入要发送的字符串：&quot;)
            if not input_str:
                # 如果没有输入数据，则跳出循环
                break

            encrypted_input = xor_encrypt(input_str, &quot;Fe!EdoWmh^w=U43SO*-#7CZyLRJHjAds&quot;)
            conn.send(encrypted_input)

        except ConnectionResetError:
            # 如果连接重置，则关闭连接并跳出循环
            conn.close()
            break

    # 关闭连接
    conn.close()
</code></pre>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端:"></a>客户端:</h3><pre><code class="lang-python"># 导入 socket 模块
import socket

# 定义异或加密函数，输入明文和密钥，返回加密后的密文
def xor_encrypt(plaintext, key):
    # 将明文和密钥转换为二进制
    plaintext = plaintext.encode()
    key = key.encode()

    # 创建一个空的字节数组，用于存储加密后的数据。
    ciphertext = bytearray()

    # 使用异或加密
    for i in range(len(plaintext)):
        byte = plaintext[i] ^ key[i % len(key)]
        ciphertext.append(byte)

    return bytes(ciphertext)

# 定义服务器的 IP 地址和端口号
ip = &quot;10.22.223.121&quot;
port = 25000

# 创建一个 TCP/IP 套接字并连接到指定的地址和端口号
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((ip, port))

while True:
    try:
        # 加密并发送数据
        input_str = input(&quot;请输入要发送的字符串：&quot;)
        if not input_str:
            # 如果没有输入数据，则跳出循环
            break

        encrypted_input = xor_encrypt(input_str, &quot;Fe!EdoWmh^w=U43SO*-#7CZyLRJHjAds&quot;)
        client.send(encrypted_input)

        # 接收服务器返回的数据并解密
        encrypted_data = client.recv(255)
        if not encrypted_data:
            # 如果没有接收到数据，则跳出循环
            break

        data = xor_encrypt(encrypted_data.decode(), &quot;Fe!EdoWmh^w=U43SO*-#7CZyLRJHjAds&quot;).decode()
        print(data)

    except ConnectionResetError:
        # 如果连接重置，则关闭连接并跳出循环
        client.close()
        break

# 关闭连接
client.close()
</code></pre>
<p>这里所用的加密方式只是简单的异或加密，实际中所用的加密函数要比其复杂的多的多的多得多。</p>
<h3 id="结果展示："><a href="#结果展示：" class="headerlink" title="结果展示："></a>结果展示：</h3><p>服务端开启服务，客户端连接。</p>
<p><img src="/img/加密通信/结果展示：1.png" alt=""></p>
<p>客户端发送hello，服务端接收：</p>
<p><img src="/img/加密通信/结果展示：2.png" alt=""></p>
<p>服务端回复:hi，客户端收到：</p>
<p><img src="/img/加密通信/结果展示：3.png" alt=""></p>
<p>最终功能展示：</p>
<p><img src="/img/加密通信/结果展示：4.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>动态内存分配</title>
    <url>/2023/08/04/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
    <content><![CDATA[<h1 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre><code class="lang-c">#include &amp;lt;stdio.h
#include &amp;lt;stdlib.h
#include &amp;lt;string.h
#include &amp;lt;errno.h
#include &amp;lt;windows.h
</code></pre>
<h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><pre><code class="lang-c">int main()
&#123;
    //像内存申请10个整形的空间
    int* p =(int*)malloc(10*sizeof(int));//malloc不初始化为零

    if(p==NULL)
    &#123;
        //打印错误的一个方式
        printf(&quot;%s\n&quot;,strerror(errno));
    &#125;
    else
    &#123;
        //正常使用空间
        int i = 0;
        for(i=0;i&amp;lt;10;i++)
        &#123;
            *(p+i)=i;
        &#125;
        for(i=0;i&amp;lt;10;i++)
        &#123;
            printf(&quot;%d &quot;,*(p+i));
        &#125;
    &#125;
    //当动态申请的空间不在用的时候，就应该还给操作系统
    free(p);
    p = NULL;
    return 0;
&#125;
</code></pre>
<h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h3><pre><code class="lang-c">int main()
&#123;
    int* p=(int*)calloc(10,sizeof(int));//calloc初始化为零

    if(p==NULL)
    &#123;
        printf(&quot;%s\n&quot;,strerror(errno));
    &#125;
    else
    &#123;
        int i = 0;
        for(i=0;i&amp;lt;10;i++)
        &#123;
            printf(&quot;%d &quot;,*(p+i));
        &#125;
    &#125;
    free(p);
    p = NULL;
    return 0;
&#125;
</code></pre>
<h3 id="realloc"><a href="#realloc" class="headerlink" title="realloc"></a>realloc</h3><pre><code class="lang-c">int main()
&#123;
    int* p = (int*)malloc(20);
    if(p==NULL)
    &#123;
        printf(&quot;%s\n&quot;,strerror(errno));
    &#125;
    else
    &#123;
        int i = 0;
        for(i=0;i&amp;lt;5;i++)
        &#123;
            *(p+i) = i;
        &#125;
    &#125;
    //就是在使用malloc开辟的20个字节空间
    //假设这里，20个字节不能满足我们使用
    //希望有40个字节的空间
    //这里用realloc开辟
    //realloc使用注意事项
    //1.原有空间后有足够的空间，原空间数据不发生变化
    //2.没有足够空间，在堆空间上另找一个合适大小的连续空间来使用。这样函数返回的是一个新地址。
    int* p2 = realloc(p,40);
    int i = 0;
    for(i=5;i&amp;lt;10;i++)
    &#123;
        *(p+i) = i;
    &#125;
    for(i=0;i&amp;lt;10;i++)
    &#123;
        printf(&quot;%d &quot;,*(p2+i));
    &#125;
    free(p);
    p = NULL;
    return 0;
&#125;
</code></pre>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><p>```c<br>int mian()<br>{<br>    //1.对空指针进行解引用操作<br>    int<em> p = (int</em>)malloc(40);<br>    //万一malloc失败了，p被赋值为NULL<br>    //*p = 0;//err</p>
<pre><code>int i = 0;
for(i=0;i&amp;lt;10;i++)
&#123;
    *(p+i) = i;//err
&#125;
free(p); 
p = NULL;

//2.对动态开辟的内存的越界访问
int *p = (int*)malloc(5*sizeof(int));
if(p == NULL)
&#123;
    return 0;
&#125;
else
&#123;
    int i = 0;
    for(i=0;i&amp;lt;10;i++)
    &#123;
        *(p+i) = i;
    &#125;
&#125;
free(p);
p = NULL;

//3.对动态开辟内存的free
int a = 10; 
int* p = &amp;amp;a;
*p = 20;
free(p);
p = NULL;

int *p = (int*)malloc(40);
if(p == NULL)
&#123;
    return 0;
&#125;
// //使用
int *p2 = realloc(p,80);
if(p2 != NULL)
&#123;
    p = p2;
&#125;

int *p = realloc(NULL,40);//malloc(40)

//4.使用free释放动态开辟内存的一部分
int *p = (int*)malloc(40);
if(p == NULL)
&#123;
    return 0;
&#125;
int i = 0;
for(i=0;i&amp;lt;10;i++)
&#123;
    *p++ = i;
&#125;
//回收空间
free(p);
p = NULL;

//5.对同一块动态内存的多次释放
int *p = (int*)malloc(40);
if(p == NULL)
&#123;
    return 0;
&#125;
//使用
//释放
free(p);
p = NULL;//避免二次free
//...
free(p);

//6.动态开辟内存忘记释放(内存泄漏)
while(1)
&#123;
    malloc(1);
&#125;
return 0;
</code></pre><p>}</p>
]]></content>
  </entry>
  <entry>
    <title>指针进阶（C语言）</title>
    <url>/2023/08/04/%E6%8C%87%E9%92%88%E8%BF%9B%E9%98%B6%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="指针进阶"><a href="#指针进阶" class="headerlink" title="指针进阶"></a>指针进阶</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre><code class="lang-c">#include&amp;lt;stdio.h
#include&amp;lt;stdlib.h
#include&amp;lt;string.h
</code></pre>
<h3 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h3><pre><code class="lang-c">int main()
&#123;
    //字符指针
    char arr1[]=&quot;abcdef&quot;;
    char arr2[]=&quot;abcdef&quot;;
    char* p1=&quot;abcdef&quot;;
    char* p2=&quot;abcdef&quot;;
    if (arr1==arr2)
    &#123;
        printf(&quot;hehe\n&quot;);
    &#125;
    else
    &#123;
        printf(&quot;haha\n&quot;);
    &#125;
    if (p1==p2)
    &#123;
        printf(&quot;hehe\n&quot;);
    &#125;
    else
    &#123;
        printf(&quot;haha\n&quot;);
    &#125;
    printf(&quot;arr1:%p\n&quot;,arr1);
    printf(&quot;arr2:%p\n&quot;,arr2);
    printf(&quot;p1:%p\n&quot;,p1);
    printf(&quot;p2:%p\n&quot;,p2);
    return 0;
&#125;
</code></pre>
<h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><pre><code class="lang-c">int main()
&#123;
    int arr1[]=&#123;1,2,3,4,5&#125;;
    int arr2[]=&#123;2,3,4,5,6&#125;;
    int arr3[]=&#123;3,4,5,6,7&#125;;

    int* parr[]=&#123;arr1,arr2,arr3&#125;;//指针数组-数组-存放指针的数组
    int i = 0;
    for (i=0;i&amp;lt;3;i++)
    &#123;
        int j=0;
        for (j=0;j&amp;lt;5;j++)
        &#123;
            printf(&quot;%d &quot;,*(parr[i]+j));
        &#125;
        printf(&quot;\n&quot;);
    &#125;
    return 0;
&#125;
</code></pre>
<h3 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h3><pre><code class="lang-c">int main()
&#123;
    int arr[5]=&#123;1,2,3,4,5&#125;;
    int (*p)[5]=&amp;amp;arr;//数组指针-指针-数组的地址要存起来

    return 0;
&#125;

int main()
&#123;
    char* arr[5];
    char* (*p)[5]=&amp;amp;arr;
    return 0;
&#125;

int main()
&#123;
    int arr[10]=&#123;1,2,3,4,5,6,7,8,9,10&#125;;
    int *p=arr;//arr[i]==*(arr+i)==*(p+i)==p[i]
    int i=0;
    for(i=0;i&amp;lt;10;i++)
    &#123;
        printf(&quot;%d &quot;,*(p+i));
    &#125;

    // int (*p)[10]=&amp;amp;arr;
    // int i=0;
    // for(i=0;i&amp;lt;10;i++)
    // &#123;
    //     printf(&quot;%d &quot;,(*p)[i]);
    // &#125;

    // for(i=0;i&amp;lt;10;i++)
    // &#123;
    //     printf(&quot;%d &quot;,*(*p+i));//*p==arr
    // &#125;
    return 0;
&#125;
</code></pre>
<h3 id="数组参数，指针参数"><a href="#数组参数，指针参数" class="headerlink" title="数组参数，指针参数"></a>数组参数，指针参数</h3><pre><code class="lang-c">//参数是数组的形式
void print1(int arr[3][5],int x,int y)
&#123;
    int i=0;
    int j=0;
    for (i=0;i&amp;lt;x;i++)
    &#123;
        for (j=0;j&amp;lt;y;j++)
        &#123;
            printf(&quot;%d &quot;,arr[i][j]);
        &#125;
        printf(&quot;\n&quot;);
    &#125;
&#125;

//参数是指针的形式
void print2(int(*p)[5],int x,int y)
&#123;
    int i=0;
    for(i=0;i&amp;lt;x;i++)
    &#123;
        int j=0;
        for(j=0;j&amp;lt;y;j++)
        &#123;
            //printf(&quot;%d &quot;,p[i][j]);
            //printf(&quot;%d &quot;,*(p[i]+j));
            printf(&quot;%d &quot;,*(*(p+i)+j));
            //printf(&quot;%d &quot;,(*(p+i))[j]);
        &#125;
        printf(&quot;\n&quot;);
    &#125;
&#125;
</code></pre>
<h3 id="二维数组传参"><a href="#二维数组传参" class="headerlink" title="二维数组传参"></a>二维数组传参</h3><pre><code class="lang-c">int main()
&#123;
    int arr[3][5]=&#123;&#123;1,2,3,4,5&#125;,&#123;2,3,4,5,6&#125;,&#123;3,4,5,6,7&#125;&#125;;
    print1(arr,3,5);//arr-数组名-数组名就是首元素地址
    print2(arr,3,5);//
    return 0;
&#125;

void test(int arr[3][5])
&#123;&#125;
void test1(int arr[][5])//可以省略行
&#123;&#125;
// void test2(int arr[3][])//err 不可以省略列
// &#123;&#125;
// void test3(int *arr)//err
// &#123;&#125;
// void test4(int **arr)//err
// &#123;&#125;
void test5(int (*arr)[5])
&#123;&#125;
int main()
&#123;
    int arr[3][5]=&#123;0&#125;;

    // test(arr);//二维数组传参
    // test1(arr);
    // test2(arr);
    // test3(arr);
    // test4(arr);
    test5(arr);
    return 0;
&#125;

void test1(int** p)
&#123;&#125;

int main()
&#123;
    int *ptr;
    test1(&amp;amp;ptr);
    int **pp=&amp;amp;ptr;
    test1(pp);
    int* arr[10];
    test1(arr);
    return 0;
&#125;
</code></pre>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><pre><code class="lang-c">//数组指针——是指向数组的指针
//函数指针——是指向函数的指针——存放函数地址的指针

int Add(int x,int y)
&#123;
    int z=0;
    z=x+y;
    return z;
&#125;

int main()
&#123;
    int a=10;
    int b=20;
    // int arr[10]=&#123;0&#125;;
    // int (*p)[10]=&amp;amp;arr;
    //printf(&quot;%d\n&quot;,Add(a,b));

    //&amp;amp;arr;
    //arr;  

    //&amp;amp;函数名 和 函数名 都是函数的地址
    /*
    printf(&quot;%p\n&quot;,&amp;amp;Add);
    printf(&quot;%p\n&quot;,Add);
    */
    int (*pa)(int,int) = Add;
    printf(&quot;%d\n&quot;,(*pa)(2,3));
    return 0;
&#125;

void Print(char* str)
&#123;
    printf(&quot;%s\n&quot;,str);
&#125;

int main()
&#123;
    void (*p)(char*) = Print;
    (*p)(&quot;hello bite&quot;);

    return 0;
&#125;

// 代码一
// (*(void(*)())0)();
// void(*)()-函数指针类型
// 把0强制类型转换成void(*)()函数指针类型-0就是一个函数地址
// 调用0地址处的该函数

// 代码二
// void (*singal(int ,void(*)(int)))(int);
// signal是一个函数声明
// signal第一个参数整形，第二个参数是函数指针类型，该函数指针指向的函数的参数是int，返回类型是void
// signal函数返回类型-函数指针-void(*   singal(int,void(*)(int)) )(int)
// 简化
// typedef void(*pfun_t)(int);
// pfun_t signal(int,pfun_t);

// typedef unsigned int unit;

int Add(int x,int y)
&#123;
    int z=0;
    z=x+y;
    return z;
&#125;

int main()
&#123;
    int a=10;
    int b=20;

    int (*pa)(int,int) = Add;
    printf(&quot;%d\n&quot;,pa(2,3));
    printf(&quot;%d\n&quot;,Add(2,3));
    printf(&quot;%d\n&quot;,(*pa)(2,3));//*是摆设

    // printf(&quot;%d\n&quot;,(**pa)(2,3));
    // printf(&quot;%d\n&quot;,(***pa)(2,3));没必要
    return 0;
&#125;
</code></pre>
<h3 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h3><pre><code class="lang-c">int Add(int x,int y)
&#123;
    return x+y;
&#125;
int Sub(int x,int y)
&#123;
    return x-y;
&#125;
int Mul(int x,int y)
&#123;
    return x*y;
&#125;
int Div(int x,int y)
&#123;
    return x/y;
&#125;

int main()
&#123;
    //指针数组
    int* arr[5];
    //需要一个数组可以存放四个函数的地址 - 函数指针的数组
    //int (*pa)(int,int) = Add;//Sub/Mul/Div
    int (*parr[4])(int,int) = &#123;Add,Sub,Mul,Div&#125;;//函数指针的数组
    int i = 0;
    for (i=0;i&amp;lt;4;i++)
    &#123;
        printf(&quot;%d\n&quot;,parr[i](2,3));
    &#125;

    return 0;
&#125;
</code></pre>
<h3 id="函数指针数组的用途：转移表"><a href="#函数指针数组的用途：转移表" class="headerlink" title="函数指针数组的用途：转移表"></a>函数指针数组的用途：转移表</h3><pre><code class="lang-c">void menu()
&#123;
    printf(&quot;*****************\n&quot;);
    printf(&quot;** 1.add  2.sub**\n&quot;);
    printf(&quot;** 3.mul  4.div**\n&quot;);
    printf(&quot;** 5.Xor  0.exit**\n&quot;);
    printf(&quot;*****************\n&quot;);
&#125;

int Add(int x,int y)
&#123;
    return x+y;
&#125;
int Sub(int x,int y)
&#123;
    return x-y;
&#125;
int Mul(int x,int y)
&#123;
    return x*y;
&#125;
int Div(int x,int y)
&#123;
    return x/y;
&#125;
int Xor(int x,int y)
&#123;
    return x^y;
&#125;

int main()
&#123;
    int input = 0;
    int x = 0;
    int y = 0;
    //转移表
    int (*pfArr[])(int,int)=&#123;0,Add,Sub,Mul,Div,Xor&#125;;
    do
    &#123;
        menu();
        printf(&quot;请选择:&quot;);
        scanf(&quot;%d&quot;,&amp;amp;input);
        if(input = 1 &amp;amp;&amp;amp; input &amp;lt;=5)
        &#123;
            printf(&quot;请输入两个操作数:&quot;);
            scanf(&quot;%d%d&quot;,&amp;amp;x,&amp;amp;y);
            int ret = pfArr[input](x,y);
            printf(&quot;%d\n&quot;,ret);
        &#125;
        else if(input == 0)
        &#123;
            printf(&quot;退出\n&quot;);
        &#125;
        else
        &#123;
            printf(&quot;选择错误\n&quot;);
        &#125;
    &#125;while(input);
    return 0;
&#125;
</code></pre>
<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><pre><code class="lang-c">void Calc(int (*pf)(int,int))
&#123;
    int x = 0;
    int y = 0;
    printf(&quot;请输入两个操作数:&quot;);
    scanf(&quot;%d%d&quot;,&amp;amp;x,&amp;amp;y);
    printf(&quot;%d\n&quot;,pf(x,y));
&#125;

int main()
&#123;
    int input = 0;

    do
    &#123;
        menu();
        printf(&quot;请选择:&quot;);
        scanf(&quot;%d&quot;,&amp;amp;input);

        switch (input)
        &#123;
            case 1:
                Calc(Add);
                break;
            case 2:
                Calc(Sub);
                break;
            case 3:
                Calc(Mul);
                break;
            case 4:
                Calc(Div);
                break;
            case 0:
                printf(&quot;退出\n&quot;);
                break;
            default:
                printf(&quot;选择错误\n&quot;);
                break;
        &#125;

    &#125;while(input);
    return 0;
&#125;



//回调函数2
void print(char* str)
&#123;
    printf(&quot;hehe:%s&quot;,str);
&#125;

void test( void(*p)(char*) )
&#123;
    printf(&quot;test\n&quot;);
    p(&quot;bit&quot;);
&#125;
int main()
&#123;
    test(print);

    return 0;
&#125;
</code></pre>
<h3 id="指向函数指针数组的指针"><a href="#指向函数指针数组的指针" class="headerlink" title="指向函数指针数组的指针"></a>指向函数指针数组的指针</h3><pre><code class="lang-c">int Add(int x,int y)
&#123;
    return x+y;
&#125;

int main()
&#123;
    int arr[10]=&#123;0&#125;;
    int (*p)[10]=&amp;amp;arr;//取出数组的地址
    int (*pfArr[4])(int,int);//pfArr是一个数组-函数指针数组
    //ppfArr是一个指向[函数指针数组]的指针 
    int (*(*ppfArr)[4])(int,int) = &amp;amp;pfArr;
    //
    //ppfArr是一个数组指针，指针指向的数组有四个元素
    //指向的数组的每个元素的类型是一个函数指针int(*)(int,int)
    //
    return 0;
&#125;
</code></pre>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre><code class="lang-c">void bubble_sort(int arr[],int sz) //整形的冒泡排序
&#123;
    int i = 0;
    for (i=0;i&amp;lt;sz-1;i++)
    &#123;
        int j=0;
        for (j=0;j&amp;lt;sz-1-i;j++)
        &#123;
            if (arr[j]arr[j+1])
            &#123;
                int tmp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = tmp;
            &#125;
        &#125;
    &#125;
&#125;

// void qsort(void *base, size_t nmemb, size_t size,
//            int (*compar)(const void *a, const void *b));
//base：指向待排序数组的第一个元素的指针。
//nmemb：数组中元素的数量。sz
//size：每个元素的大小（以字节为单位）。width
//compar：用于比较两个元素的函数指针,比较两个元素的所用函数的地址-这个函数使用者自己实现函数指针的两个参数是：带比较的两个元素的地址。

int cmp_int(const void* a,const void* b)
&#123;
    //比较两个整形值
    return (*(int*)a - *(int*)b);;
&#125;

void test1()
&#123;
    int arr[10]=&#123;9,8,7,6,5,4,3,2,1,0&#125;;
    int sz = sizeof(arr) / sizeof(arr[0]);
    qsort(arr,sz,sizeof(arr[0]),cmp_int);
    int i = 0;
    for (i=0;i&amp;lt;sz;i++)
    &#123;
        printf(&quot;%d &quot;,arr[i]);
    &#125;
&#125;

int cmp_float(const void*a,const void* b)
&#123;
    return *(float*)a - *(float*)b;
&#125;

void test2()
&#123;
    float f[]=&#123;9.0,8.0,7.0,6.0,5.0,4.0,3.0&#125;;
    int sz = sizeof(f) / sizeof(f[0]);
    qsort(f,sz,sizeof(f[0]),cmp_float);
    int j = 0;
    for (j=0;j&amp;lt;sz;j++)
    &#123;
        printf(&quot;%f &quot;,f[j]);
    &#125;
&#125;

struct Stu
&#123;
   char name[20];
   int age;
&#125;;

int cmp_stu_by_age(const void* a,const void* b)
&#123;
    return ((struct Stu*)a)-age - ((struct Stu*)b)-age;
&#125;

int cmp_stu_by_name(const void* a,const void* b)
&#123;
    //比较字符串用strcmp
    return strcmp(((struct Stu*)a)-name,((struct Stu*)b)-name);
&#125;

void test3()
&#123;
    struct Stu s[3]=&#123;&#123;"zhangsan",20&#125;,&#123;"lisi",30&#125;,&#123;"wangwu",10&#125;&#125;;
    int sz = sizeof(s) / sizeof(s[0]);
    //qsort(s,sz,sizeof(s[0]),cmp_stu_by_age);
    qsort(s,sz,sizeof(s[0]),cmp_stu_by_name);
    int k = 0;
    for (k=0;k&amp;lt;sz;k++)
    &#123;
        printf(&quot;%d &quot; ,s[k].age);
        //printf(&quot;%s &quot; ,s[k].name);
    &#125;
&#125;

// 实现bubble_sort函数的程序员，他是否知道未来排序的数据类型-不知道
// 那程序员也不知道，带比较的两个元素的类型

void Swap(char* buf1,char* buf2,int width)
&#123;
    int i = 0;
    for(i=0;i&amp;lt;width;i++)
    &#123;
        char tmp = *buf1;
        *buf1 = *buf2;
        *buf2 = tmp;
        buf1++;
        buf2++;
    &#125;
&#125;

void bubble_sort(void* base,int sz,int width,int(*cmp)(void*a,void*b))
&#123;
    int i = 0;
    //趟数
    for (i=0;i&amp;lt;sz-1;i++)
    &#123;
        //每一趟比较的对数
        int j = 0;
        for(j=0;j&amp;lt;sz-1-i;j++)
        &#123;
            //两个元素比较
            if(cmp((char*)base+j*width,(char*)base+(j+1)*width)0)
            &#123;
                //交换
                Swap((char*)base+j*width,(char*)base+(j+1)*width,width);
            &#125;
        &#125;
    &#125;
&#125;

void test4()
&#123;
    int arr[10]=&#123;9,8,7,6,5,4,3,2,1,0&#125;;
    int sz = sizeof(arr) / sizeof(arr[0]);
    //使用bubble_sort的程序员一定知道自己排序的是什么数据、
    //就应该知道如何比较待排序数组中的元素
    bubble_sort(arr,sz,sizeof(arr[0]),cmp_int);
    int i = 0;
    for (i=0;i&amp;lt;sz;i++)
    &#123;
        printf(&quot;%d &quot;,arr[i]);
    &#125;
&#125;

void test5()
&#123;
    struct Stu s[3]=&#123;&#123;"zhangsan",20&#125;,&#123;"lisi",30&#125;,&#123;"wangwu",10&#125;&#125;;
    int sz = sizeof(s) / sizeof(s[0]);
    bubble_sort(s,sz,sizeof(s[0]),cmp_stu_by_age);
    int k = 0;
    for (k=0;k&amp;lt;sz;k++)
    &#123;
        printf(&quot;%d &quot; ,s[k].age);
        //printf(&quot;%s &quot; ,s[k].name);
    &#125;
&#125;

int main()
&#123;
    //test1();
    //test2();
    //test3();
    //test4();
    test5();
    return 0;
&#125;
</code></pre>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>```c<br>int main()<br>{<br>    //数组名是首元素的地址<br>    //1.sizeof(数组名) - 数组名表示首元素地址<br>    //2.&amp;数组名 - 数组名表示整个数组<br>    //一维数组<br>    int a[] = {1,2,3,4};//4<em>4=16<br>    printf(“%d\n”,sizeof(a));//16-sizeof(数组名)-计算的是数组总大小-单位是字节<br>    printf(“%d\n”,sizeof(a+0));//数组名这里表示首元素地址，a+0还是首元素地址，地址大小就是4/8个字节<br>    printf(“%d\n”,sizeof(</em>a));//4-数字名表示首元素地址，<em>a就是首元素，sizeof(</em>a)就是4<br>    printf(“%d\n”,sizeof(a+1));//a+1第二个元素地址，地址大小为4/8<br>    printf(“%d\n”,sizeof(a[1]));//4-第二个元素的大小<br>    printf(“%d\n”,sizeof(&amp;a));//&amp;a取出的是数组的地址，数组的地址也是地址，地址大小为4/8<br>    printf(“%d\n”,sizeof(*&amp;a));//16 - &amp;a是取数组的地址，数组的地址解引用访问的数组，sizeof计算的就是数组的大小单位是字节<br>    printf(“%d\n”,sizeof(&amp;a+1));//&amp;a是数组的地址，&amp;a+1虽然地址跳过整个数组，但还是地址，所以是4/8<br>    printf(“%d\n”,sizeof(&amp;a[0]));//&amp;a[0]是第一个元素的地址<br>    printf(“%d\n”,sizeof(&amp;a[0]+1));//&amp;a[0]+1是第二个元素的地址</p>
<pre><code>//字符数组
char arr[] = &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;&#125;;
printf(&quot;%d\n&quot;,sizeof(arr));//sizeof计算的是数组大小，6*1=6字节
printf(&quot;%d\n&quot;,sizeof(arr+0));//arr是首元素的地址，arr+0还是首元素的地址 地址的大小4/8
printf(&quot;%d\n&quot;,sizeof(*arr));//1  arr是首元素地址 *arr就是首元素 首元素是字符大小是一个字节
printf(&quot;%d\n&quot;,sizeof(arr[1]));//1
printf(&quot;%d\n&quot;,sizeof(&amp;amp;arr));//&amp;amp;arr 虽然是数组的地址，但还是地址，地址大小4/8
printf(&quot;%d\n&quot;,sizeof(&amp;amp;arr+1));//&amp;amp;arr+1 是跳过整个数组的地址，地址大小4/8
printf(&quot;%d\n&quot;,sizeof(&amp;amp;arr[0]+1));//第二个元素的地址，地址大小4/8

printf(&quot;%d\n&quot;,strlen(arr));//随机值1
printf(&quot;%d\n&quot;,strlen(arr+0));//随机值1
// printf(&quot;%d\n&quot;,strlen(*arr));//err
// printf(&quot;%d\n&quot;,strlen(arr[1]));//err
// printf(&quot;%d\n&quot;,strlen(&amp;amp;arr));//随机值1
// printf(&quot;%d\n&quot;,strlen(&amp;amp;arr+1));//随机值2 -6
// printf(&quot;%d\n&quot;,strlen(&amp;amp;arr[0]+1));//随机值3 -1

return 0;
</code></pre><p>}</p>
]]></content>
  </entry>
  <entry>
    <title>永恒之蓝漏洞的利用</title>
    <url>/2023/09/15/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="永恒之蓝漏洞的利用"><a href="#永恒之蓝漏洞的利用" class="headerlink" title="永恒之蓝漏洞的利用"></a>永恒之蓝漏洞的利用</h1><h3 id="一、实验前准备"><a href="#一、实验前准备" class="headerlink" title="一、实验前准备"></a>一、实验前准备</h3><p>  首先关闭win7的防火墙，开启445端口，并且攻击机（kali）和靶机（win7）可以互相ping通。<br><img src="/img/永恒之蓝漏洞的利用/一、实验前准备1.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/一、实验前准备2.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/一、实验前准备3.png" alt=""></p>
<h3 id="二、实验过程"><a href="#二、实验过程" class="headerlink" title="二、实验过程"></a>二、实验过程</h3><p>使用kali打开msfconsole，使用它先进行win7靶机的445端口扫描，检查其是否打开，然后我们搜索ms17-010模块。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程1.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程2.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程3.png" alt=""></p>
<p> 这里我们可以得到一些模块，其中auxiliary/scanner/smb/smb_ms17_010 是永恒之蓝扫描模块， exploit/windows/smb/ms17_010_eternalblue 是永恒之蓝攻击模块。一般配合使用，前者先扫描，若显示有漏洞，再进行攻击。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程4.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程5.png" alt=""></p>
<p> 这里我们可以看到靶机存在永恒之蓝漏洞，这里我们对其使用攻击模块</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程6.png" alt=""></p>
<p> 这里我们需要设置攻击机、靶机的地址和payload。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程7.png" alt=""></p>
<p> 这里可以看到攻击成功了，出现 meterpreter 。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程8.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程9.png" alt=""></p>
<p>成功后我们用sysinfo来获取靶机当前浏览屏幕的照片。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程10.png" alt=""></p>
<p>这里我们可以看到获取到靶机的shell权限后我们看到的是乱码，这里我们用chcp 65001这个windows命令来转换编码格式，“65001”这里代表“UTF-8”这种编码方式。转换后就是我们正常看到的命令提示符的界面。<br>    这里再使用net user test 123456 / add 添加一个用户名为test，密码为123456的用户，再将其加入管理员组，方便我们后面的操作。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程11.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程12.png" alt=""></p>
<p>这里我们可以看到靶机中已经存在我们在kali上添加的用户test。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程13.png" alt=""><br>  systeminfo查看win7的系统信息<br><img src="/img/永恒之蓝漏洞的利用/二、实验过程14.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程15.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程16.png" alt=""></p>
<p>这里在攻击机上下关机命令，相应的靶机上出现关机提示。<br>下达重启命令也是同样的效果。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程17.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程18.png" alt=""></p>
<p>最后我们返回kali，命令行输入rdesktop 192.168.175.203进行桌面远程链接。</p>
<p><img src="/img/永恒之蓝漏洞的利用/二、实验过程19.png" alt=""><br><img src="/img/永恒之蓝漏洞的利用/二、实验过程20.png" alt=""></p>
<p>远程登录成功。</p>
]]></content>
  </entry>
  <entry>
    <title>结构体</title>
    <url>/2023/08/04/%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    <content><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre><code class="lang-c">#include&amp;lt;stdio.h
#include&amp;lt;stddef.h
</code></pre>
<h3 id="声明结构体"><a href="#声明结构体" class="headerlink" title="声明结构体"></a>声明结构体</h3><pre><code class="lang-c">//声明一个学生类型，是想过学生类型来创建学生变量
//描述学生：属性-名字+电话+性别+年龄
struct Stu
&#123;
    char name[20];
    char tele[12];
    char sex[20];
    int age;
&#125;s4,s5,s6;

struct Stu s3;//全局变量

int main()
&#123;
    //创建的结构体变量
    struct Stu s1;
    struct Stu s2;

    return 0;
&#125;
</code></pre>
<h3 id="匿名结构体类型"><a href="#匿名结构体类型" class="headerlink" title="匿名结构体类型"></a>匿名结构体类型</h3><pre><code class="lang-c">struct
&#123;
    int a;
    char c;
&#125;sa;

struct
&#123;
    int a;
    char c;
&#125;*psa;

int main()
&#123;
    psa=&amp;amp;sa;//非法的

    return 0;
&#125;
</code></pre>
<h3 id="结构体的自引用"><a href="#结构体的自引用" class="headerlink" title="结构体的自引用"></a>结构体的自引用</h3><pre><code class="lang-c">struct Node
&#123;
    int date;
    struct Node* next;
&#125;;

int main()
&#123;
    return 0;
&#125;

typedef struct Node
&#123;
    int date;//4
    struct Node* next;//4/8
&#125;Node;

int main()
&#123;
    struct Node n1;
    Node n2;

    return 0;
&#125;
</code></pre>
<h3 id="结构体的初始化"><a href="#结构体的初始化" class="headerlink" title="结构体的初始化"></a>结构体的初始化</h3><pre><code class="lang-c">struct T
&#123;
    double weight;
    short age;
&#125;;

struct S
&#123;
    char c;
    struct T st;
    int a;
    double d;
    char arr[20];
&#125;;

int main()
&#123;
    struct S s = &#123;&#39;c&#39;,&#123;55.6,30&#125;,100,3.14,&quot;hello bit&quot;&#125;;
    printf(&quot;%c %lf %d %d %lf %s\n&quot;,s.c,s.st.weight,s.st.age,s.a,s.d,s.arr);

    return 0;
&#125;
</code></pre>
<h3 id="结构体内存对齐"><a href="#结构体内存对齐" class="headerlink" title="结构体内存对齐"></a>结构体内存对齐</h3><pre><code class="lang-c">struct S1
&#123;
    char c1;
    int a;
    char c2;
&#125;;

struct S2
&#123;
    char c1;
    char c2;
    int a;
&#125;;

struct S3
&#123;
    double d;
    char c;
    int i;
&#125;;

struct S4
&#123;
    char c1;
    struct S3 s3;
    double d;
&#125;;

int main()
&#123;
    struct S1 s1 = &#123;0&#125;;
    printf(&quot;%d\n&quot;,sizeof(s1));
    struct S2 s2 = &#123;0&#125;;
    printf(&quot;%d\n&quot;,sizeof(s2));
    struct S3 s3 = &#123;0&#125;;
    printf(&quot;%d\n&quot;,sizeof(s3));
    struct S4 s4 = &#123;0&#125;;
    printf(&quot;%d\n&quot;,sizeof(s4));
    return 0;
&#125;

#pragma pack(4)  //设置默认对齐数为4
struct S
&#123;
    char c1;
    double d;
&#125;;
#pragma pack()  //取消默认对齐数

int main()
&#123;
    struct S s;
    printf(&quot;%d\n&quot;,sizeof(s));
    return 0;

&#125;
</code></pre>
<h3 id="写一个宏，计算结构体中某变量相对于首地址的偏移-offsetof-宏的实现、"><a href="#写一个宏，计算结构体中某变量相对于首地址的偏移-offsetof-宏的实现、" class="headerlink" title="写一个宏，计算结构体中某变量相对于首地址的偏移  offsetof()宏的实现、"></a>写一个宏，计算结构体中某变量相对于首地址的偏移  offsetof()宏的实现、</h3><pre><code class="lang-c">struct S
&#123;
    char c;
    int i;
    double d;

&#125;;


int main()
&#123;
    //offsetof();
    printf(&quot;%d\n&quot;,offsetof(struct S,c));
    printf(&quot;%d\n&quot;,offsetof(struct S,i));
    printf(&quot;%d\n&quot;,offsetof(struct S,d));
    return 0;
&#125;
</code></pre>
<h3 id="结构体传参"><a href="#结构体传参" class="headerlink" title="结构体传参"></a>结构体传参</h3><pre><code class="lang-c">struct S
&#123;
    int a;
    char c;
    double d;
&#125;;

void Init(struct S* ps)
&#123;
    ps-a = 100;
    ps-c = &#39;w&#39;;
    ps-d = 3.14;
&#125;
//传值
Print1(struct S tmp)
&#123;
    printf(&quot;%d %c %lf\n&quot;,tmp.a,tmp.c,tmp.d);
&#125;
//传址(推荐)
Print2(const struct S* ps)
&#123;
    printf(&quot;%d %c %lf\n&quot;,ps-a,ps-c,ps-d);
&#125;

int main()
&#123;
    struct S s = &#123;0&#125;;
    Init(&amp;amp;s);
    Print1(s);
    Print2(&amp;amp;s);
    /*s.a = 100;
    s.c = &#39;w&#39;;
    s.d = 3.14;

    printf(&quot;%d\n&quot;,s.a);*/
    return 0;
&#125;
</code></pre>
<h3 id="位段-二进制位-为了节省空间"><a href="#位段-二进制位-为了节省空间" class="headerlink" title="位段 - 二进制位  为了节省空间"></a>位段 - 二进制位  为了节省空间</h3><pre><code class="lang-c">struct S
&#123;
    int a:2;
    int b:5;
    int c:10;
    int d:30;
    //后面数字不能大于32
&#125;;
//47bit - 6个字节*8 = 48bit
int main()
&#123;
    struct S s;
    printf(&quot;%d\n&quot;,sizeof(s));//8个字节
    return 0;
&#125;
</code></pre>
<h3 id="位段的内存分配"><a href="#位段的内存分配" class="headerlink" title="位段的内存分配"></a>位段的内存分配</h3><p>```c<br>struct S<br>{<br>    char a:3;<br>    char b:4;<br>    char c:5;<br>    char d:4;<br>};</p>
<p>int main()<br>{<br>    struct S s={0};</p>
<pre><code>s.a = 10;
s.b = 20;
s.c = 3;
s.d = 4;
return 0;
</code></pre><p>}</p>
]]></content>
  </entry>
</search>
